"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArchRpcClient = void 0;
const axios_1 = __importDefault(require("axios"));
const types_1 = require("./types");
const secp256k1 = __importStar(require("@noble/secp256k1"));
const sha256_1 = require("@noble/hashes/sha256");
class ArchRpcClient {
    constructor(url) {
        this.rpc = axios_1.default.create({
            baseURL: url,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }



    private encodeCreateAccountData(txid: string, vout: number): number[] {
        const buffer = Buffer.alloc(37); // 32 bytes for txid + 4 bytes for vout + 1 byte for instruction type

        // Write instruction type (assuming 0 for CreateAccount)
        buffer.writeUInt8(0, 0);

        // Write txid (assuming it's a hex string)
        Buffer.from(txid, 'hex').copy(buffer, 1);

        // Write vout as little-endian 32-bit unsigned integer
        buffer.writeUInt32LE(vout, 33);

        return Array.from(buffer);
    }
      
    private createCreateAccountInstruction(pubkey: Pubkey, txid: string, vout: number): Instruction {
        const systemProgramId = new Pubkey(new Uint8Array(32).fill(0, 0, 31).fill(1, 31));
        
        return {
            programId: systemProgramId,
            accounts: [{
            pubkey: pubkey,
            isSigner: true,
            isWritable: true,
            }],
            data: this.encodeCreateAccountData(txid, vout),
        };
    }
    
    async call(method, params) {
        const response = await this.rpc.post('', {
            jsonrpc: '2.0',
            id: 1,
            method,
            params,
        });
        if (response.data.error) {
            throw new Error(response.data.error.message);
        }
        return response.data.result;
    }
    async isNodeReady() {
        return this.call('is_node_ready', []);
    }
    async getAccountAddress(accountPubkey) {
        return this.call('get_account_address', accountPubkey.serialize());
    }
    async readAccountInfo(pubkey) {
        return this.call('read_account_info', pubkey.serialize());
    }
    async sendTransaction(transaction) {
        return this.call('send_transaction', [transaction]);
    }
    async sendTransactions(transactions) {
        return this.call('send_transactions', [transactions]);
    }
    async getBlockCount() {
        return this.call('get_block_count', []);
    }
    async startDkg() {
        return this.call('start_dkg', []);
    }
    async getBlockHash(height) {
        return this.call('get_block_hash', height);
    }
    async getBlock(hash) {
        return this.call('get_block', hash);
    }
    async getProcessedTransaction(txId) {
        return this.call('get_processed_transaction', txId);
    }
    // New methods to handle Instructions and Messages
    async createInstruction(programId, accounts, data) {
        return this.call('create_instruction', [programId.serialize(), accounts.map(a => a.serialize()), data]);
    }
    async createMessage(signers, instructions) {
        return this.call('create_message', [signers.map(s => s.serialize()), instructions]);
    }
    async createArchAccount(privateKey: Uint8Array, txid: string, vout: number): Promise<string> {
        const publicKey = secp256k1.getPublicKey(privateKey, true);
        const pubkey = new Pubkey(publicKey.slice(1)); // Remove the first byte (0x02 or 0x03)
    
        const instruction = this.createCreateAccountInstruction(pubkey, txid, vout);
        const message = await this.createMessage([pubkey], [instruction]);
        const transaction = await this.signTransaction(message, [privateKey]);
        
        return this.sendTransaction(transaction);
      }
    
    async signTransaction(message, signers) {
        const messageHash = (0, sha256_1.sha256)(this.encodeMessage(message));
        const signatures = await Promise.all(signers.map(async (signer) => {
            if (!secp256k1.utils.isValidPrivateKey(signer)) {
                throw new Error('Invalid private key');
            }
            // Use secp256k1.schnorr.sign for Schnorr signatures
            const signature = await secp256k1.schnorr.sign(messageHash, signer);
            // Convert the signature to a hex string
            return Buffer.from(signature).toString('hex');
        }));
        return {
            version: 0,
            signatures,
            message,
        };
    }
    encodeMessage(message) {
        // Implement message encoding to match the Rust implementation
        // This should produce the same byte representation as the Rust code
        // You may need to adjust this based on your specific Message structure
        const encoder = new TextEncoder();
        return encoder.encode(JSON.stringify(message));
    }
}
exports.ArchRpcClient = ArchRpcClient;
