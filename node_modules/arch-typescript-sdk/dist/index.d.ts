import { RuntimeTransaction, ProcessedTransaction, Block, AccountInfoResult, Message, Pubkey } from './types';
/**
 * ArchRpcClient provides methods to interact with the Arch blockchain network.
 */
export declare class ArchRpcClient {
    private rpc;
    /**
     * Creates a new instance of ArchRpcClient.
     * @param url The URL of the Arch RPC endpoint.
     */
    constructor(url: string);
    /**
     * Sends an RPC call to the Arch network.
     * @param method The RPC method name.
     * @param params The parameters for the RPC method.
     * @returns A promise that resolves with the result of the RPC call.
     */
    private call;
    /**
     * Creates a new Arch account.
     * @param privateKey The private key of the account creator.
     * @param txid The transaction ID associated with the account creation.
     * @param vout The output index in the transaction.
     * @returns A promise that resolves with the transaction ID of the account creation.
     */
    createArchAccount(privateKey: Uint8Array, txid: string, vout: number): Promise<string>;
    transferAccountOwnership(privateKey: Uint8Array, programPubkeyHex: string): Promise<string>;
    callProgram(privateKey: Uint8Array, programPubkeyHex: string, data: number[]): Promise<string>;
    private createCallProgramInstruction;
    /**
     * Creates an instruction for creating a new account.
     * @param pubkey The public key of the new account.
     * @param txid The transaction ID associated with the account creation.
     * @param vout The output index in the transaction.
     * @returns The create account instruction.
     */
    private createCreateAccountInstruction;
    private createTransferAccountOwnershipInstruction;
    /**
     * Encodes the data for creating a new account.
     * @param txid The transaction ID associated with the account creation.
     * @param vout The output index in the transaction.
     * @returns An array of numbers representing the encoded data.
     */
    private encodeCreateAccountData;
    private encodeTransferAccountOwnershipData;
    private serializeMessage;
    /**
     * Sends multiple transactions to the Arch network.
     * @param transactions An array of transactions to send.
     * @returns A promise that resolves with an array of transaction IDs.
     */
    sendTransactions(transactions: RuntimeTransaction[]): Promise<string[]>;
    sendTransaction(transaction: RuntimeTransaction): Promise<string>;
    /**
     * Signs a transaction message with the provided private keys.
     * @param message The transaction message to sign.
     * @param signers An array of private keys to sign the message with.
     * @returns A promise that resolves with the signed transaction.
     */
    private signTransaction;
    signMessage(message: Message, signers: Uint8Array[]): Promise<string[]>;
    /**
     * Serializes a transaction for sending to the Arch network.
     * @param transaction The transaction to serialize.
     * @returns The serialized transaction object.
     */
    private serializeTransaction;
    /**
     * Serializes an instruction.
     * @param instruction The instruction to serialize.
     * @returns The serialized instruction object.
     */
    private serializeInstruction;
    private serializePubkey;
    encodeMessage(message: Message): number[];
    private serializeU32;
    private serializeAccountMeta;
    /**
     * Calculates the length of an encoded instruction.
     * @param instruction The instruction to calculate the length for.
     * @returns The length of the encoded instruction.
     */
    private getEncodedInstructionLength;
    /**
     * Encodes an instruction into a buffer.
     * @param instruction The instruction to encode.
     * @param buffer The buffer to encode the instruction into.
     * @param offset The starting offset in the buffer.
     * @returns The new offset after encoding the instruction.
     */
    private encodeInstruction;
    /**
     * Creates an instruction.
     * @param program_id The program ID for the instruction.
     * @param accounts The accounts involved in the instruction.
     * @param data The data for the instruction.
     * @returns The created instruction.
     */
    private createInstruction;
    /**
     * Creates a message.
     * @param signers The signers of the message.
     * @param instructions The instructions in the message.
     * @returns The created message.
     */
    private createMessage;
    /**
     * Checks if the node is ready.
     * @returns A promise that resolves with a boolean indicating if the node is ready.
     */
    isNodeReady(): Promise<boolean>;
    /**
     * Gets the address for an account.
     * @param accountPubkey The public key of the account.
     * @returns A promise that resolves with the account address.
     */
    getAccountAddress(accountPubkey: Pubkey): Promise<string>;
    /**
     * Reads account information.
     * @param pubkey The public key of the account.
     * @returns A promise that resolves with the account information.
     */
    readAccountInfo(pubkey: Pubkey): Promise<AccountInfoResult>;
    /**
     * Gets the current block count.
     * @returns A promise that resolves with the current block count.
     */
    getBlockCount(): Promise<number>;
    /**
     * Starts the Distributed Key Generation process.
     * @returns A promise that resolves when the DKG process has started.
     */
    startDkg(): Promise<void>;
    /**
     * Gets the block hash for a given height.
     * @param height The block height.
     * @returns A promise that resolves with the block hash.
     */
    getBlockHash(height: number): Promise<string>;
    /**
     * Gets block information for a given hash.
     * @param hash The block hash.
     * @returns A promise that resolves with the block information.
     */
    getBlock(hash: string): Promise<Block>;
    /**
     * Gets information about a processed transaction.
     * @param txId The transaction ID.
     * @returns A promise that resolves with the processed transaction information.
     */
    getProcessedTransaction(txId: string): Promise<ProcessedTransaction>;
}
export * from './types';
