export declare class Pubkey {
    readonly bytes: Uint8Array;
    constructor(bytes: Uint8Array);
    static fromString(s: string): Pubkey;
    toString(): string;
    serialize(): number[];
    static systemProgram(): Pubkey;
}
export type NodePubkey = number[];
export declare enum Status {
    Processing = 0,
    Processed = 1
}
export type Signature = string;
export interface Instruction {
    program_id: Pubkey;
    accounts: AccountMeta[];
    data: number[];
}
export interface AccountMeta {
    pubkey: Pubkey;
    is_signer: boolean;
    is_writable: boolean;
}
export interface Message {
    signers: Pubkey[];
    instructions: Instruction[];
}
export interface RuntimeTransaction {
    version: number;
    signatures: Signature[];
    message: Message;
}
export interface ProcessedTransaction {
    runtime_transaction: RuntimeTransaction;
    status: Status;
    bitcoin_txids: string[];
}
export interface Block {
    transactions: string[];
    previous_block_hash: string;
    transaction_count: number;
    timestamp: number;
    merkle_root: string;
}
export interface ArchNode {
    url: string;
    pubkey: NodePubkey;
    node_id: number;
    is_ready: boolean;
}
export interface AccountInfoResult {
    owner: string;
    data: number[];
    utxo: string;
    is_executable: boolean;
}
